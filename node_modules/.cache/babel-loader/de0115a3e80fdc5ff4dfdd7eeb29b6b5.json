{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/gitHub/Palette-Color/src/NewPaletteForm.js\";\nimport React, { Component } from \"react\";\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from '@material-ui/core/Drawer';\nimport ColorPickerForm from \"./ColorPickerForm\";\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport styles from \"./styles/NewPaletteFormStyles\";\nimport Button from \"@material-ui/core/Button\";\nimport DraggableColorList from \"./DraggableColorList\";\nimport { arrayMove } from \"react-sortable-hoc\";\nimport PaletteFormNav from \"./PaletteFormNav\";\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = newPaletteName => {\n      const newPalette = {\n        paletteName: newPaletteName,\n        id: newPaletteName.toLowerCase().replace(/ /g, \"-\"),\n        colors: this.state.colors\n      };\n      this.props.savePalette(newPalette);\n      this.props.history.push(\"/\");\n    };\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.addNewColor = newColor => {\n      this.setState({\n        colors: [...this.state.colors, newColor],\n        newColorName: \"\"\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.removeColor = colorName => {\n      this.setState({\n        colors: this.state.colors.filter(color => color.name !== colorName)\n      });\n    };\n\n    this.onSortEnd = ({\n      oldIndex,\n      newIndex\n    }) => {\n      this.setState(({\n        colors\n      }) => ({\n        colors: arrayMove(colors, oldIndex, newIndex)\n      }));\n    };\n\n    this.clearColors = () => {\n      this.setState({\n        colors: []\n      });\n    };\n\n    this.addRandomColor = () => {\n      const allColors = this.props.palettes.map(p => p.colors).flat();\n      var rand = Math.floor(Math.random() * allColors.length);\n      const randomColor = allColors[rand];\n      this.setState({\n        colors: [...this.state.colors, randomColor]\n      });\n    };\n\n    this.state = {\n      open: true,\n      newColorName: \"\",\n      colors: this.props.palettes[0].colors\n    };\n  }\n\n  render() {\n    const {\n      classes,\n      maxColors,\n      palettes\n    } = this.props;\n    const {\n      open,\n      colors\n    } = this.state;\n    const paletteIsFull = colors.length >= maxColors;\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(PaletteFormNav, {\n      open: open,\n      classes: classes,\n      palettes: palettes,\n      handleSubmit: this.handleSubmit,\n      handleDrawerOpen: this.handleDrawerOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(ChevronLeftIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }))), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      variant: \"h4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Design Your Palette\"), React.createElement(\"div\", {\n      className: classes.buttons,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.clearColors,\n      variant: \"contained\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Clear Palette\"), React.createElement(Button, {\n      onClick: this.addRandomColor,\n      variant: \"contained\",\n      color: \"primary\",\n      disabled: paletteIsFull,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Random Color\")), React.createElement(ColorPickerForm, {\n      paletteIsFull: paletteIsFull,\n      addNewColor: this.addNewColor,\n      colors: colors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    })), React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(DraggableColorList, {\n      colors: this.state.colors,\n      removeColor: this.removeColor,\n      axis: \"xy\",\n      onSortEnd: this.onSortEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    })));\n  }\n\n}\n\nNewPaletteForm.defaultProps = {\n  maxColors: 20\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["/Users/apple/Documents/gitHub/Palette-Color/src/NewPaletteForm.js"],"names":["React","Component","classNames","withStyles","Drawer","ColorPickerForm","Typography","Divider","IconButton","ChevronLeftIcon","styles","Button","DraggableColorList","arrayMove","PaletteFormNav","NewPaletteForm","constructor","props","handleSubmit","newPaletteName","newPalette","paletteName","id","toLowerCase","replace","colors","state","savePalette","history","push","handleDrawerOpen","setState","open","handleDrawerClose","addNewColor","newColor","newColorName","handleChange","e","target","name","value","removeColor","colorName","filter","color","onSortEnd","oldIndex","newIndex","clearColors","addRandomColor","allColors","palettes","map","p","flat","rand","Math","floor","random","length","randomColor","render","classes","maxColors","paletteIsFull","root","drawer","paper","drawerPaper","drawerHeader","buttons","content","contentShift","defaultProps","withTheme"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,SAAQC,SAAR,QAAwB,oBAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,MAAMC,cAAN,SAA6Bd,SAA7B,CAAuC;AAKvCe,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,SAanBC,YAbmB,GAaHC,cAAD,IAAmB;AACjC,YAAMC,UAAU,GAAE;AACjBC,QAAAA,WAAW,EAAGF,cADG;AAEjBG,QAAAA,EAAE,EAAGH,cAAc,CAACI,WAAf,GAA6BC,OAA7B,CAAqC,IAArC,EAA0C,GAA1C,CAFY;AAGjBC,QAAAA,MAAM,EAAG,KAAKC,KAAL,CAAWD;AAHH,OAAlB;AAKA,WAAKR,KAAL,CAAWU,WAAX,CAAuBP,UAAvB;AACA,WAAKH,KAAL,CAAWW,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AAEA,KAtBkB;;AAAA,SAyBnBC,gBAzBmB,GAyBA,MAAM;AACxB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAd;AACA,KA3BkB;;AAAA,SA6BnBC,iBA7BmB,GA6BC,MAAM;AACzB,WAAKF,QAAL,CAAc;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAd;AACA,KA/BkB;;AAAA,SAmCnBE,WAnCmB,GAmCJC,QAAD,IAAa;AACxB,WAAKJ,QAAL,CAAc;AACbN,QAAAA,MAAM,EAAC,CAAC,GAAG,KAAKC,KAAL,CAAWD,MAAf,EAAwBU,QAAxB,CADM;AAEbC,QAAAA,YAAY,EAAE;AAFD,OAAd;AAKD,KAzCiB;;AAAA,SA0ClBC,YA1CkB,GA0CHC,CAAD,IAAM;AAClB,WAAKP,QAAL,CAAc;AACb,SAACO,CAAC,CAACC,MAAF,CAASC,IAAV,GAAkBF,CAAC,CAACC,MAAF,CAASE;AADd,OAAd;AAGA,KA9CgB;;AAAA,SAkDnBC,WAlDmB,GAkDJC,SAAD,IAAc;AAC3B,WAAKZ,QAAL,CAAc;AACbN,QAAAA,MAAM,EAAE,KAAKC,KAAL,CAAWD,MAAX,CAAkBmB,MAAlB,CAAyBC,KAAK,IAAIA,KAAK,CAACL,IAAN,KAAeG,SAAjD;AADK,OAAd;AAGA,KAtDkB;;AAAA,SAwDnBG,SAxDmB,GAwDR,CAAC;AAACC,MAAAA,QAAD;AAAYC,MAAAA;AAAZ,KAAD,KAA2B;AACrC,WAAKjB,QAAL,CAAe,CAAC;AAACN,QAAAA;AAAD,OAAD,MAAe;AAC7BA,QAAAA,MAAM,EAAEZ,SAAS,CAACY,MAAD,EAASsB,QAAT,EAAmBC,QAAnB;AADY,OAAf,CAAf;AAGA,KA5DkB;;AAAA,SA8DnBC,WA9DmB,GA8DN,MAAK;AACjB,WAAKlB,QAAL,CAAc;AAACN,QAAAA,MAAM,EAAE;AAAT,OAAd;AACA,KAhEkB;;AAAA,SAkElByB,cAlEkB,GAkED,MAAK;AACtB,YAAMC,SAAS,GAAE,KAAKlC,KAAL,CAAWmC,QAAX,CAAoBC,GAApB,CAAwBC,CAAC,IAAIA,CAAC,CAAC7B,MAA/B,EAAuC8B,IAAvC,EAAjB;AACA,UAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAeR,SAAS,CAACS,MAApC,CAAX;AACA,YAAMC,WAAW,GAAGV,SAAS,CAACK,IAAD,CAA7B;AACA,WAAKzB,QAAL,CAAc;AACbN,QAAAA,MAAM,EAAE,CAAC,GAAG,KAAKC,KAAL,CAAWD,MAAf,EAAuBoC,WAAvB;AADK,OAAd;AAGA,KAzEkB;;AAEjB,SAAKnC,KAAL,GAAa;AACXM,MAAAA,IAAI,EAAE,IADK;AAGXI,MAAAA,YAAY,EAAG,EAHJ;AAIXX,MAAAA,MAAM,EAAE,KAAKR,KAAL,CAAWmC,QAAX,CAAoB,CAApB,EAAuB3B;AAJpB,KAAb;AAQD;;AAmEDqC,EAAAA,MAAM,GAAG;AACR,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,SAAX;AAAsBZ,MAAAA;AAAtB,QAAmC,KAAKnC,KAA9C;AACA,UAAM;AAAEe,MAAAA,IAAF;AAAQP,MAAAA;AAAR,QAAmB,KAAKC,KAA9B;AACA,UAAMuC,aAAa,GAAGxC,MAAM,CAACmC,MAAP,IAAiBI,SAAvC;AAEC,WACC;AAAK,MAAA,SAAS,EAAED,OAAO,CAACG,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEC,oBAAC,cAAD;AACE,MAAA,IAAI,EAAGlC,IADT;AAEE,MAAA,OAAO,EAAI+B,OAFb;AAGE,MAAA,QAAQ,EAAIX,QAHd;AAIE,MAAA,YAAY,EAAI,KAAKlC,YAJvB;AAKE,MAAA,gBAAgB,EAAE,KAAKY,gBALzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,EAUD,oBAAC,MAAD;AACC,MAAA,SAAS,EAAEiC,OAAO,CAACI,MADpB;AAEI,MAAA,OAAO,EAAC,YAFZ;AAGI,MAAA,MAAM,EAAC,MAHX;AAII,MAAA,IAAI,EAAEnC,IAJV;AAKO,MAAA,OAAO,EAAE;AACdoC,QAAAA,KAAK,EAAEL,OAAO,CAACM;AADD,OALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASC;AAAK,MAAA,SAAS,EAAEN,OAAO,CAACO,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAE,KAAKrC,iBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADD,CATD,EAcC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdD,EAeC,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAE,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAfD,EAkBC;AAAK,MAAA,SAAS,EAAG8B,OAAO,CAACQ,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,MAAD;AACC,MAAA,OAAO,EAAG,KAAKtB,WADhB;AAEC,MAAA,OAAO,EAAG,WAFX;AAGC,MAAA,KAAK,EAAE,WAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADD,EAQC,oBAAC,MAAD;AACC,MAAA,OAAO,EAAG,KAAKC,cADhB;AAEC,MAAA,OAAO,EAAG,WAFX;AAGC,MAAA,KAAK,EAAE,SAHR;AAIC,MAAA,QAAQ,EAAGe,aAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBARD,CAlBD,EAoCC,oBAAC,eAAD;AACC,MAAA,aAAa,EAAKA,aADnB;AAEC,MAAA,WAAW,EAAG,KAAK/B,WAFpB;AAGC,MAAA,MAAM,EAAIT,MAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApCD,CAVC,EAsDD;AACE,MAAA,SAAS,EAAEvB,UAAU,CAAC6D,OAAO,CAACS,OAAT,EAAkB;AACvC,SAACT,OAAO,CAACU,YAAT,GAAwBzC;AADe,OAAlB,CADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKI;AAAK,MAAA,SAAS,EAAE+B,OAAO,CAACO,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,EAMK,oBAAC,kBAAD;AACC,MAAA,MAAM,EAAG,KAAK5C,KAAL,CAAWD,MADrB;AAEC,MAAA,WAAW,EAAG,KAAKiB,WAFpB;AAGC,MAAA,IAAI,EAAE,IAHP;AAIC,MAAA,SAAS,EAAG,KAAKI,SAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANL,CAtDC,CADD;AAwEC;;AA/JoC;;AAAjC/B,c,CACG2D,Y,GAAe;AACvBV,EAAAA,SAAS,EAAE;AADY,C;AAiKxB,eAAe7D,UAAU,CAACO,MAAD,EAAS;AAAEiE,EAAAA,SAAS,EAAE;AAAb,CAAT,CAAV,CAAwC5D,cAAxC,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from '@material-ui/core/Drawer';\nimport ColorPickerForm from \"./ColorPickerForm\"\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport styles from \"./styles/NewPaletteFormStyles\";\nimport Button from \"@material-ui/core/Button\";\nimport DraggableColorList from \"./DraggableColorList\"\nimport {arrayMove} from \"react-sortable-hoc\"\nimport PaletteFormNav from \"./PaletteFormNav\"\n \nclass NewPaletteForm extends Component {\n  static defaultProps = {\n\tmaxColors: 20\n  };\n\nconstructor(props) {\n\tsuper(props);\n\t\tthis.state = {\n\t \t\topen: true,\n\t \t\t\n\t \t\tnewColorName : \"\",\n\t \t\tcolors: this.props.palettes[0].colors,\n\t \t\t\n\t\t};\n\n}\n\n\nhandleSubmit = (newPaletteName) =>{\n\tconst newPalette ={\n\t\tpaletteName : newPaletteName,\n\t\tid : newPaletteName.toLowerCase().replace(/ /g,\"-\"),\n\t\tcolors : this.state.colors\n\t}\n\tthis.props.savePalette(newPalette);\n\tthis.props.history.push(\"/\");\n\n}\n\t\n\nhandleDrawerOpen = () => {\n\tthis.setState({ open: true });\n};\n\nhandleDrawerClose = () => {\n\tthis.setState({ open: false });\n};\n\n\n\naddNewColor = (newColor) =>{\n  \tthis.setState({ \n  \t\tcolors:[...this.state.colors , newColor]  , \n  \t\tnewColorName :\"\"\n  \t});\n  \n }\n handleChange =(e) =>{\n  \tthis.setState({\n  \t\t[e.target.name] : e.target.value\n  \t})\n  }\n\n  \n\nremoveColor = (colorName) =>{\n\tthis.setState({\n\t\tcolors: this.state.colors.filter(color => color.name !== colorName )\n\t})\n}\n\nonSortEnd =({oldIndex , newIndex}) => {\n\tthis.setState (({colors}) => ({\n\t\tcolors :arrayMove(colors ,oldIndex, newIndex)\n\t}))\n};\n\nclearColors =() =>{\n\tthis.setState({colors :[]});\n}\n\n addRandomColor = () =>{\n\tconst allColors =this.props.palettes.map(p => p.colors).flat();\n\tvar rand = Math.floor(Math.random()* allColors.length);\n\tconst randomColor = allColors[rand];\n\tthis.setState({\n\t\tcolors :[...this.state.colors, randomColor] \n\t})\n}\n\n  \n\nrender() {\n\tconst { classes, maxColors, palettes } = this.props;\n\tconst { open, colors } = this.state;\n\tconst paletteIsFull = colors.length >= maxColors;\n\n  return (\n   <div className={classes.root}>\n{/*.-----------------Navbar--------------------------------} */} \n\t   <PaletteFormNav \n\t   \t\topen ={open}\n\t   \t\tclasses = {classes}\n\t   \t\tpalettes = {palettes}\n\t   \t\thandleSubmit = {this.handleSubmit}\n\t   \t\thandleDrawerOpen={this.handleDrawerOpen}\n\n\t   \t/>\n\t\t<Drawer\n\t\t\tclassName={classes.drawer}\n\t\t    variant='persistent'\n\t\t    anchor='left'\n\t\t    open={open}\n\t   \t    classes={{\n\t\t\t\tpaper: classes.drawerPaper\n\t\t\t  }}\n\t\t>\n\t\t\t<div className={classes.drawerHeader}>\n\t\t\t\t<IconButton onClick={this.handleDrawerClose}>\n\t\t\t\t  <ChevronLeftIcon />\n\t\t\t\t</IconButton>\n\t\t\t</div>\n\t\t\t<Divider />\n\t\t\t<Typography variant =\"h4\" >\n\t\t\t\tDesign Your Palette\n\t\t\t</Typography>\n\t\t\t<div className ={classes.buttons} >\n\t\t\t\t<Button \n\t\t\t\t\tonClick ={this.clearColors} \n\t\t\t\t\tvariant = \"contained\" \n\t\t\t\t\tcolor =\"secondary\"\n\t\t\t\t>\n\t\t\t\t\tClear Palette\n\t\t\t\t</Button>\n\t\t\t\t<Button \n\t\t\t\t\tonClick ={this.addRandomColor}\n\t\t\t\t\tvariant = \"contained\" \n\t\t\t\t\tcolor =\"primary\"\n\t\t\t\t\tdisabled ={paletteIsFull}\n\t\t\t\t>\n\t\t\t\t\tRandom Color\n\t\t\t\t</Button>\n\t\t\t</div>\n{/*------------------------------COLORPICKER-------------------------*/}\n\t\t\t<ColorPickerForm \n\t\t\t\tpaletteIsFull = { paletteIsFull}\n\t\t\t\taddNewColor ={this.addNewColor}\n\t\t\t\tcolors = {colors}\n\n\t\t\t/> \n\t\t\t\n\t\t</Drawer>\n\t\t<main\n\t\t \tclassName={classNames(classes.content, {\n\t\t\t\t[classes.contentShift]: open\n\t\t    })}\n\t\t>\n\t\t    <div className={classes.drawerHeader} />\n\t\t    \t<DraggableColorList \n\t\t    \t\tcolors ={this.state.colors}\n\t\t    \t\tremoveColor ={this.removeColor}\n\t\t    \t\taxis =\"xy\"\n\t\t    \t\tonSortEnd ={this.onSortEnd}\n\t\t   \t\t/>\n\t\t    \t\n\n\t\t</main>\n\t  </div>\n\t);\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(NewPaletteForm);"]},"metadata":{},"sourceType":"module"}