{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/gitHub/Palette-Color/src/ColorPickerForm.js\";\nimport React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { ChromePicker } from \"react-color\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport styles from \"./styles/ColorPickerFormStyle\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nclass ColorPickerForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateCurrentColor = newColor => {\n      this.setState({\n        currentColor: newColor.hex\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleSubmit = () => {\n      const newColor = {\n        color: this.state.currentColor,\n        name: this.state.newColorName\n      };\n      this.props.addNewColor(newColor);\n      this.setState({\n        newColorName: ''\n      });\n    };\n\n    this.componentDidMount = () => {\n      ValidatorForm.addValidationRule(\"isColorNameUnique\", value => this.props.colors.every(({\n        name\n      }) => name.toLowerCase() !== value.toLowerCase()));\n      ValidatorForm.addValidationRule(\"isColorUnique\", value => this.props.colors.every(({\n        color\n      }) => color !== this.state.currentColor));\n    };\n\n    this.state = {\n      currentColor: \"teal\",\n      newPaletteName: \"\"\n    };\n  }\n\n  render() {\n    const {\n      paletteIsFull,\n      classes\n    } = this.props;\n    const {\n      currentColor,\n      newColorName\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(ChromePicker, {\n      color: currentColor,\n      className: classes.picker,\n      onChangeComplete: this.updateCurrentColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(ValidatorForm, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      className: classes.colorNameInput,\n      value: newColorName,\n      name: \"newColorName\",\n      onChange: this.handleChange,\n      validators: [\"required\", \"isColorNameUnique\", \"isColorUnique\"],\n      errorMessages: [\"This field is required\", \"Color name must be unique\", \"This color already exist\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      style: {\n        backgroundColor: paletteIsFull ? \"grey\" : currentColor\n      },\n      type: \"submit\",\n      disabled: paletteIsFull,\n      className: classes.addColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, paletteIsFull ? \"Palette Full\" : \"Add Color\")));\n  }\n\n}\n\nexport default withStyles(styles)(ColorPickerForm);","map":{"version":3,"sources":["/Users/apple/Documents/gitHub/Palette-Color/src/ColorPickerForm.js"],"names":["React","Component","Button","ChromePicker","ValidatorForm","TextValidator","styles","withStyles","ColorPickerForm","constructor","props","updateCurrentColor","newColor","setState","currentColor","hex","handleChange","e","target","name","value","handleSubmit","color","state","newColorName","addNewColor","componentDidMount","addValidationRule","colors","every","toLowerCase","newPaletteName","render","paletteIsFull","classes","picker","colorNameInput","backgroundColor","addColor"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport{ChromePicker} from \"react-color\";\nimport {ValidatorForm , TextValidator} from \"react-material-ui-form-validator\"\nimport styles from \"./styles/ColorPickerFormStyle\"\nimport { withStyles } from \"@material-ui/core/styles\";\n\nclass ColorPickerForm extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcurrentColor :\"teal\",\n\t\t\tnewPaletteName : \"\"\n\n\t\t}\n\n\t}\n\n\tupdateCurrentColor = (newColor)=>{\n  \t\tthis.setState({currentColor : newColor.hex})\n\t}\n\n\thandleChange =(e) =>{\n\t  \tthis.setState({\n\t  \t\t[e.target.name] : e.target.value\n\t  \t})\n \t }\n\n \t handleSubmit =() =>{\n \t \tconst newColor = {\n  \t\t\tcolor : this.state.currentColor,\n  \t\t\tname  : this.state.newColorName\n\t\t}\n\t\tthis.props.addNewColor(newColor);\n\t\tthis.setState({newColorName :''})\n \t }\n \t componentDidMount = () =>{\n\t\tValidatorForm.addValidationRule(\"isColorNameUnique\", value => \n\t\t\tthis.props.colors.every(\n\t\t\t\t({ name }) => name.toLowerCase() !== value.toLowerCase()\n\t\t\t)\n\t\t)\n\t\tValidatorForm.addValidationRule(\"isColorUnique\", value => \n\t\t\tthis.props.colors.every(\n\t\t\t\t({ color }) => color !== this.state.currentColor \n\t\t\t)\n\t\t)\n\t}\n\n \t\n\n\trender(){\n\t\tconst {paletteIsFull,classes} = this.props;\n\t\tconst {currentColor ,newColorName} =this.state;\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<ChromePicker  \n\t\t\t\t\tcolor={currentColor}\n\t\t\t\t\tclassName = {classes.picker}\n\t\t\t   \t onChangeComplete={this.updateCurrentColor}\n\t\t\t\t/>\n\t\t\t\t<ValidatorForm onSubmit = {this.handleSubmit}>\n\t\t\t\t\t<TextValidator \n\t\t\t\t\t\tclassName ={classes.colorNameInput}\n\t\t\t\t\t\tvalue = {newColorName}\n\t\t\t\t\t\tname  ='newColorName'\n\t\t\t\t\t\tonChange ={this.handleChange}\n\t\t\t\t\t\tvalidators ={[\n\t\t\t\t\t\t\t\"required\" ,\n\t\t\t\t\t\t\t\"isColorNameUnique\",\n\t\t\t\t\t\t\t\"isColorUnique\"\n\t\t\t\t\t\t]}\n\t\t\t\t\t\terrorMessages ={[\n\t\t\t\t\t\t\t\"This field is required\",\n\t\t\t\t\t\t\t\"Color name must be unique\",\n\t\t\t\t\t\t\t\"This color already exist\"\n\t\t\t\t\t\t]}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button \n\t\t\t\t\t\tvariant=\"contained\" \n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tstyle = {{\n\t\t\t\t\t\t\tbackgroundColor : paletteIsFull\n\t\t\t\t\t\t\t? \"grey\"\n\t\t\t\t\t\t\t:currentColor}}\n\t\t\t\t\t\ttype  = \"submit\"\n\t\t\t\t\t\tdisabled ={paletteIsFull}\n\t\t\t\t\t\tclassName ={classes.addColor}\n\t\t\t\t\t>\n\t\t\t\t\t\t{paletteIsFull ? \"Palette Full\" :\"Add Color\"}\n\t\t\t\t\t</Button>\n\t\t\t\t</ValidatorForm>\n\t\t\t</div>\n\n\t\t);\n\t}\n}\n\nexport default withStyles(styles)(ColorPickerForm);"]},"metadata":{},"sourceType":"module"}