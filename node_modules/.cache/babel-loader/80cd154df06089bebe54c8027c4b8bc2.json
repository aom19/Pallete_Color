{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/gitHub/Palette-Color/src/NewPaletteForm.js\";\nimport React, { Component } from \"react\";\nimport clsx from 'clsx';\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport styles from \"./styles/NewPaletteFormStyles\";\nimport seedColors from \"./seedColors\";\nimport Button from \"@material-ui/core/Button\";\nimport { ChromePicker } from \"react-color\";\nimport DraggableColorBox from \"./DraggableColorBox\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      ValidatorForm.addValidationRule('isColorNameUnique', value => {\n        this.state.color.every(({\n          name\n        }) => name.toLowerCase !== value.toLowerCase());\n      });\n    };\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.updateCurrentColor = newColor => {\n      this.setState({\n        currentColor: newColor.hex\n      });\n    };\n\n    this.addNewColor = () => {\n      const newColor = {\n        color: this.state.currentColor,\n        name: this.state.newName\n      };\n      this.setState({\n        colors: [...this.state.colors, newColor]\n      });\n      console.log(newColor);\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        newName: e.target.value\n      });\n    };\n\n    this.state = {\n      open: true,\n      currentColor: \"teal\",\n      newName: \"\",\n      colors: []\n    };\n  }\n\n  render() {\n    const {\n      classes,\n      maxColors,\n      palettes\n    } = this.props;\n    const {\n      open,\n      colors\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(AppBar, {\n      position: \"fixed\",\n      className: clsx(classes.appBar, {\n        [classes.appBarShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      color: \"inherit\",\n      \"aria-label\": \"open drawer\",\n      onClick: this.handleDrawerOpen,\n      edge: \"start\",\n      className: clsx(classes.menuButton, open && classes.hide),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(MenuIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })), React.createElement(Typography, {\n      variant: \"h6\",\n      noWrap: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Persistent drawer\"))), React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(ChevronLeftIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }))), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      variant: \"h4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Design Your Palette\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Clear Palette\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Random Color\")), React.createElement(ChromePicker, {\n      color: this.state.currentColor,\n      onChangeComplete: this.updateCurrentColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(ValidatorForm, {\n      onSubmit: this.addNewColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      value: this.state.newName,\n      onChange: this.handleChange,\n      validators: [\"required\", \"isColorNameUnique\"],\n      errorMessages: [\"This field is required\", \"\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      style: {\n        backgroundColor: this.state.currentColor\n      },\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Add Color\"))), React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), this.state.colors.map(color => React.createElement(DraggableColorBox, {\n      color: color.color,\n      name: color.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nNewPaletteForm.defaultProps = {\n  maxColors: 20\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["/Users/apple/Documents/gitHub/Palette-Color/src/NewPaletteForm.js"],"names":["React","Component","clsx","classNames","withStyles","makeStyles","useTheme","Drawer","CssBaseline","AppBar","Toolbar","Typography","Divider","IconButton","MenuIcon","ChevronLeftIcon","ChevronRightIcon","ListItem","ListItemIcon","ListItemText","InboxIcon","MailIcon","styles","seedColors","Button","ChromePicker","DraggableColorBox","ValidatorForm","TextValidator","NewPaletteForm","constructor","props","componentDidMount","addValidationRule","value","state","color","every","name","toLowerCase","handleDrawerOpen","setState","open","handleDrawerClose","updateCurrentColor","newColor","currentColor","hex","addNewColor","newName","colors","console","log","handleChange","e","target","render","classes","maxColors","palettes","root","appBar","appBarShift","menuButton","hide","drawer","paper","drawerPaper","drawerHeader","backgroundColor","content","contentShift","map","defaultProps","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport clsx from 'clsx';\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport styles from \"./styles/NewPaletteFormStyles\";\nimport seedColors from \"./seedColors\";\nimport Button from \"@material-ui/core/Button\";\nimport{ChromePicker} from \"react-color\";\nimport DraggableColorBox from \"./DraggableColorBox\"\nimport {ValidatorForm , TextValidator} from \"react-material-ui-form-validator\"\n\n\n \nclass NewPaletteForm extends Component {\n  static defaultProps = {\n\tmaxColors: 20\n  };\n\nconstructor(props) {\n\tsuper(props);\n\t\tthis.state = {\n\t \t\topen: true,\n\t \t\tcurrentColor :\"teal\",\n\t \t\tnewName : \"\",\n\t \t\tcolors: []\n\t\t};\n\n}\ncomponentDidMount =() =>{\n\tValidatorForm.addValidationRule('isColorNameUnique', (value) => {\n\t\tthis.state.color.every(\n\t\t\t({name}) => name.toLowerCase !== value.toLowerCase()\n\t\t);\n\t})\n}\n\n\t\n\nhandleDrawerOpen = () => {\n\tthis.setState({ open: true });\n};\n\nhandleDrawerClose = () => {\n\tthis.setState({ open: false });\n};\n\nupdateCurrentColor = (newColor)=>{\n  \tthis.setState({currentColor : newColor.hex})\n}\n\naddNewColor = () =>{\n  \tconst newColor = {\n  \t\tcolor : this.state.currentColor,\n  \t\tname  : this.state.newName\n\t}\n  \tthis.setState({ colors:[...this.state.colors , newColor] });\n  \tconsole.log(newColor);\n }\n\n  handleChange =(e) =>{\n  \tthis.setState({newName : e.target.value})\n  }\n\nrender() {\n\tconst { classes, maxColors, palettes } = this.props;\n\tconst { open, colors } = this.state;\n\n  return (\n   <div className={classes.root}>\n\t   <AppBar\n\t\t\tposition=\"fixed\"\n\t\t\tclassName={clsx(classes.appBar, {\n\t\t\t\t[classes.appBarShift]: open,\n\t\t\t})}\n\t\t>\n\t\t\t<Toolbar>\n\t\t\t \t<IconButton\n\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\taria-label=\"open drawer\"\n\t\t\t\t\tonClick={this.handleDrawerOpen}\n\t\t\t\t\tedge=\"start\"\n\t\t\t\t\tclassName={clsx(classes.menuButton, open && classes.hide)}\n\t\t\t    >\n\t\t\t    \t<MenuIcon />\n\t\t\t    </IconButton>\n\t\t\t    <Typography variant=\"h6\" noWrap>\n\t\t\t\t\tPersistent drawer\n\t\t\t    </Typography>\n\t\t\t</Toolbar>\n\t    </AppBar>\n\t\t<Drawer\n\t\t\tclassName={classes.drawer}\n\t\t    variant='persistent'\n\t\t    anchor='left'\n\t\t    open={open}\n\t   \t    classes={{\n\t\t\t\tpaper: classes.drawerPaper\n\t\t\t  }}\n\t\t>\n\t\t\t<div className={classes.drawerHeader}>\n\t\t\t\t<IconButton onClick={this.handleDrawerClose}>\n\t\t\t\t  <ChevronLeftIcon />\n\t\t\t\t</IconButton>\n\t\t\t</div>\n\t\t\t<Divider />\n\t\t\t<Typography variant =\"h4\" >\n\t\t\t\tDesign Your Palette\n\t\t\t</Typography>\n\t\t\t<div>\n\t\t\t\t<Button variant = \"contained\" color =\"secondary\">\n\t\t\t\t\tClear Palette\n\t\t\t\t</Button>\n\t\t\t\t<Button variant = \"contained\" color =\"primary\">\n\t\t\t\t\tRandom Color\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t\t<ChromePicker  \n\t\t\t\tcolor={this.state.currentColor}\n\t\t\t    onChangeComplete={this.updateCurrentColor}\n\t\t\t/>\n\t\t\t<ValidatorForm onSubmit = {this.addNewColor}>\n\t\t\t\t<TextValidator \n\t\t\t\t\tvalue = {this.state.newName}\n\t\t\t\t\tonChange ={this.handleChange}\n\t\t\t\t\tvalidators ={[\"required\" , \"isColorNameUnique\"]}\n\t\t\t\t\terrorMessages ={[\"This field is required\",\"\"]}\n\t\t\t\t/>\n\t\t\t\t<Button \n\t\t\t\tvariant=\"contained\" \n\t\t\t\tcolor=\"primary\"\n\t\t\t\tstyle = {{backgroundColor :this.state.currentColor}}\n\t\t\t\ttype  = \"submit\"\n\t\t\t>\n\t\t\t\tAdd Color\n\t\t\t</Button>\n\t\t\t</ValidatorForm>\n\t\t\t\n\t\t</Drawer>\n\t\t<main\n\t\t \tclassName={classNames(classes.content, {\n\t\t\t\t[classes.contentShift]: open\n\t\t    })}\n\t\t>\n\t\t    <div className={classes.drawerHeader} />\n\n\t\t    \t{this.state.colors.map(color => (\n\t\t    \t\t<DraggableColorBox \n\t\t    \t\t\t color = {color.color}\n\t\t    \t\t\t name  = {color.name}\n\t\t    \t\t/>\n\t\t    \t))}\n\n\t\t</main>\n\t  </div>\n\t);\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(NewPaletteForm);"]},"metadata":{},"sourceType":"module"}