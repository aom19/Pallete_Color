{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/gitHub/Palette-Color/src/ColorPickerForm.js\";\nimport React, { Component } from \"react\";\nimport clsx from 'clsx';\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from '@material-ui/core/Drawer';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport styles from \"./styles/NewPaletteFormStyles\";\nimport Button from \"@material-ui/core/Button\";\nimport { ChromePicker } from \"react-color\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport DraggableColorList from \"./DraggableColorList\";\nimport { arrayMove } from \"react-sortable-hoc\";\nimport { Link } from \"react-router-dom\";\n\nclass ColorPickerForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateCurrentColor = newColor => {\n      this.setState({\n        currentColor: newColor.hex\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleSubmit = () => {\n      const newColor = {\n        color: this.state.currentColor,\n        name: this.state.newColorName\n      };\n      this.props.addNewColor(newColor);\n    };\n\n    this.componentDidMount = () => {\n      ValidatorForm.addValidationRule(\"isColorNameUnique\", value => this.state.colors.every(({\n        name\n      }) => name.toLowerCase() !== value.toLowerCase()));\n      ValidatorForm.addValidationRule(\"isColorUnique\", value => this.state.colors.every(({\n        color\n      }) => color !== this.state.currentColor));\n    };\n\n    this.state = {\n      currentColor: \"teal\",\n      newPaletteName: \"\",\n      colors: this.props.palettes[0].colors\n    };\n  }\n\n  render() {\n    const {\n      paletteIsFull\n    } = this.props;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(ChromePicker, {\n      color: this.state.currentColor,\n      onChangeComplete: this.updateCurrentColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(ValidatorForm, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      value: this.state.newColorName,\n      name: \"newColorName\",\n      onChange: this.handleChange,\n      validators: [\"required\", \"isColorNameUnique\", \"isColorUnique\"],\n      errorMessages: [\"This field is required\", \"Color name must be unique\", \"This color already exist\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      style: {\n        backgroundColor: paletteIsFull ? \"grey\" : this.state.currentColor\n      },\n      type: \"submit\",\n      disabled: paletteIsFull,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, paletteIsFull ? \"Palette Full\" : \"Add Color\")));\n  }\n\n}\n\nexport default ColorPickerForm;","map":{"version":3,"sources":["/Users/apple/Documents/gitHub/Palette-Color/src/ColorPickerForm.js"],"names":["React","Component","clsx","classNames","withStyles","Drawer","Typography","Divider","IconButton","ChevronLeftIcon","styles","Button","ChromePicker","ValidatorForm","TextValidator","DraggableColorList","arrayMove","Link","ColorPickerForm","constructor","props","updateCurrentColor","newColor","setState","currentColor","hex","handleChange","e","target","name","value","handleSubmit","color","state","newColorName","addNewColor","componentDidMount","addValidationRule","colors","every","toLowerCase","newPaletteName","palettes","render","paletteIsFull","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport clsx from 'clsx';\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from '@material-ui/core/Drawer';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport styles from \"./styles/NewPaletteFormStyles\";\nimport Button from \"@material-ui/core/Button\";\nimport{ChromePicker} from \"react-color\";\nimport {ValidatorForm , TextValidator} from \"react-material-ui-form-validator\"\nimport DraggableColorList from \"./DraggableColorList\"\nimport {arrayMove} from \"react-sortable-hoc\"\nimport {Link} from \"react-router-dom\";\n\n\nclass ColorPickerForm extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcurrentColor :\"teal\",\n\t\t\tnewPaletteName : \"\",\n\t\t\tcolors: this.props.palettes[0].colors,\n\t\t}\n\n\t}\n\n\tupdateCurrentColor = (newColor)=>{\n  \t\tthis.setState({currentColor : newColor.hex})\n\t}\n\n\thandleChange =(e) =>{\n\t  \tthis.setState({\n\t  \t\t[e.target.name] : e.target.value\n\t  \t})\n \t }\n\n \t handleSubmit =() =>{\n \t \tconst newColor = {\n  \t\t\tcolor : this.state.currentColor,\n  \t\t\tname  : this.state.newColorName\n\t\t}\n\t\tthis.props.addNewColor(newColor);\n \t }\n\n \tcomponentDidMount = () =>{\n\t\tValidatorForm.addValidationRule(\"isColorNameUnique\", value => \n\t\t\tthis.state.colors.every(\n\t\t\t\t({ name }) => name.toLowerCase() !== value.toLowerCase()\n\t\t\t)\n\t\t)\n\t\tValidatorForm.addValidationRule(\"isColorUnique\", value => \n\t\t\tthis.state.colors.every(\n\t\t\t\t({ color }) => color !== this.state.currentColor \n\t\t\t)\n\t\t)\n\t}\n\n\trender(){\n\t\tconst {paletteIsFull} = this.props;\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<ChromePicker  \n\t\t\t\t\tcolor={this.state.currentColor}\n\t\t\t   \t onChangeComplete={this.updateCurrentColor}\n\t\t\t\t/>\n\t\t\t\t<ValidatorForm onSubmit = {this.handleSubmit}>\n\t\t\t\t\t<TextValidator \n\t\t\t\t\t\tvalue = {this.state.newColorName}\n\t\t\t\t\t\tname  ='newColorName'\n\t\t\t\t\t\tonChange ={this.handleChange}\n\t\t\t\t\t\tvalidators ={[\n\t\t\t\t\t\t\t\"required\" ,\n\t\t\t\t\t\t\t\"isColorNameUnique\",\n\t\t\t\t\t\t\t\"isColorUnique\"\n\t\t\t\t\t\t]}\n\t\t\t\t\t\terrorMessages ={[\n\t\t\t\t\t\t\t\"This field is required\",\n\t\t\t\t\t\t\t\"Color name must be unique\",\n\t\t\t\t\t\t\t\"This color already exist\"\n\t\t\t\t\t\t]}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button \n\t\t\t\t\t\tvariant=\"contained\" \n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tstyle = {{\n\t\t\t\t\t\t\tbackgroundColor : paletteIsFull\n\t\t\t\t\t\t\t? \"grey\"\n\t\t\t\t\t\t\t:this.state.currentColor}}\n\t\t\t\t\t\ttype  = \"submit\"\n\t\t\t\t\t\tdisabled ={paletteIsFull}\n\t\t\t\t\t>\n\t\t\t\t\t\t{paletteIsFull ? \"Palette Full\" :\"Add Color\"}\n\t\t\t\t\t</Button>\n\t\t\t\t</ValidatorForm>\n\t\t\t</div>\n\n\t\t);\n\t}\n}\n\nexport default ColorPickerForm;"]},"metadata":{},"sourceType":"module"}