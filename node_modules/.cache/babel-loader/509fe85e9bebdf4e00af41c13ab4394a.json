{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/gitHub/Palette-Color/src/NewPaletteForm.js\";\nimport React, { Component } from \"react\";\nimport clsx from 'clsx';\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport styles from \"./styles/NewPaletteFormStyles\";\nimport Button from \"@material-ui/core/Button\";\nimport { ChromePicker } from \"react-color\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport DraggableColorList from \"./DraggableColorList\";\nimport { arrayMove } from \"react-sortable-hoc\";\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      ValidatorForm.addValidationRule(\"isColorNameUnique\", value => this.state.colors.every(({\n        name\n      }) => name.toLowerCase() !== value.toLowerCase()));\n      ValidatorForm.addValidationRule(\"isColorUnique\", value => this.state.colors.every(({\n        color\n      }) => color !== this.state.currentColor));\n      ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value => this.props.palettes.every(({\n        paletteName\n      }) => paletteName.toLowerCase() !== value.toLowerCase()));\n    };\n\n    this.handleSubmit = () => {\n      let newName = this.state.newPaletteName;\n      const newPalette = {\n        paletteName: newName,\n        id: newName.toLowerCase().replace(/ /g, \"-\"),\n        colors: this.state.colors\n      };\n      this.props.savePalette(newPalette);\n      this.props.history.push(\"/\");\n    };\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.updateCurrentColor = newColor => {\n      this.setState({\n        currentColor: newColor.hex\n      });\n    };\n\n    this.addNewColor = () => {\n      const newColor = {\n        color: this.state.currentColor,\n        name: this.state.newColorName\n      };\n      this.setState({\n        colors: [...this.state.colors, newColor],\n        newColorName: \"\"\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.removeColor = colorName => {\n      this.setState({\n        colors: this.state.colors.filter(color => color.name !== colorName)\n      });\n    };\n\n    this.onSortEnd = ({\n      oldIndex,\n      newIndex\n    }) => {\n      this.setState(({\n        colors\n      }) => ({\n        colors: arrayMove(colors, oldIndex, newIndex)\n      }));\n    };\n\n    this.clearColors = () => {\n      this.setState({\n        colors: []\n      });\n    };\n\n    this.addRandomColor = () => {\n      const allColors = this.props.palettes.map(p => p.colors).flat();\n      console.log(allColors);\n    };\n\n    this.state = {\n      open: true,\n      currentColor: \"teal\",\n      newColorName: \"\",\n      colors: this.props.palettes[0].colors,\n      newPaletteName: \"\"\n    };\n  }\n\n  render() {\n    const {\n      classes,\n      maxColors,\n      palettes\n    } = this.props;\n    const {\n      open,\n      colors\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(AppBar, {\n      position: \"fixed\",\n      className: clsx(classes.appBar, {\n        [classes.appBarShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      color: \"inherit\",\n      \"aria-label\": \"open drawer\",\n      onClick: this.handleDrawerOpen,\n      edge: \"start\",\n      className: clsx(classes.menuButton, open && classes.hide),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(MenuIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    })), React.createElement(Typography, {\n      variant: \"h6\",\n      noWrap: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Persistent drawer\"), React.createElement(ValidatorForm, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      value: this.state.newPaletteName,\n      label: \"Palette Name\",\n      name: \"newPaletteName\",\n      onChange: this.handleChange,\n      validators: [\"required\", \"isPaletteNameUnique\"],\n      errorMessages: [\"Enter a palette name\", \"This name is used\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      type: \"submit\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Save Palette\")))), React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(ChevronLeftIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }))), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      variant: \"h4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Design Your Palette\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.clearColors,\n      variant: \"contained\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"Clear Palette\"), React.createElement(Button, {\n      onClick: this.addRandomColor,\n      variant: \"contained\",\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Random Color\")), React.createElement(ChromePicker, {\n      color: this.state.currentColor,\n      onChangeComplete: this.updateCurrentColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), React.createElement(ValidatorForm, {\n      onSubmit: this.addNewColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      value: this.state.newColorName,\n      name: \"newColorName\",\n      onChange: this.handleChange,\n      validators: [\"required\", \"isColorNameUnique\", \"isColorUnique\"],\n      errorMessages: [\"This field is required\", \"Color name must be unique\", \"This color already exist\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      style: {\n        backgroundColor: this.state.currentColor\n      },\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, \"Add Color\"))), React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }), React.createElement(DraggableColorList, {\n      colors: this.state.colors,\n      removeColor: this.removeColor,\n      axis: \"xy\",\n      onSortEnd: this.onSortEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    })));\n  }\n\n}\n\nNewPaletteForm.defaultProps = {\n  maxColors: 20\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["/Users/apple/Documents/gitHub/Palette-Color/src/NewPaletteForm.js"],"names":["React","Component","clsx","classNames","withStyles","Drawer","AppBar","Toolbar","Typography","Divider","IconButton","MenuIcon","ChevronLeftIcon","styles","Button","ChromePicker","ValidatorForm","TextValidator","DraggableColorList","arrayMove","NewPaletteForm","constructor","props","componentDidMount","addValidationRule","value","state","colors","every","name","toLowerCase","color","currentColor","palettes","paletteName","handleSubmit","newName","newPaletteName","newPalette","id","replace","savePalette","history","push","handleDrawerOpen","setState","open","handleDrawerClose","updateCurrentColor","newColor","hex","addNewColor","newColorName","handleChange","e","target","removeColor","colorName","filter","onSortEnd","oldIndex","newIndex","clearColors","addRandomColor","allColors","map","p","flat","console","log","render","classes","maxColors","root","appBar","appBarShift","menuButton","hide","drawer","paper","drawerPaper","drawerHeader","backgroundColor","content","contentShift","defaultProps","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport clsx from 'clsx';\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport styles from \"./styles/NewPaletteFormStyles\";\nimport Button from \"@material-ui/core/Button\";\nimport{ChromePicker} from \"react-color\";\nimport {ValidatorForm , TextValidator} from \"react-material-ui-form-validator\"\nimport DraggableColorList from \"./DraggableColorList\"\nimport {arrayMove} from \"react-sortable-hoc\"\n\n \nclass NewPaletteForm extends Component {\n  static defaultProps = {\n\tmaxColors: 20\n  };\n\nconstructor(props) {\n\tsuper(props);\n\t\tthis.state = {\n\t \t\topen: true,\n\t \t\tcurrentColor :\"teal\",\n\t \t\tnewColorName : \"\",\n\t \t\tcolors: this.props.palettes[0].colors,\n\t \t\tnewPaletteName : \"\"\n\t\t};\n\n}\n\ncomponentDidMount =() =>{\n\tValidatorForm.addValidationRule(\"isColorNameUnique\", value => \n\t\tthis.state.colors.every(\n\t\t\t({ name }) => name.toLowerCase() !== value.toLowerCase()\n\t\t)\n\t)\n\tValidatorForm.addValidationRule(\"isColorUnique\", value => \n\t\tthis.state.colors.every(\n\t\t\t({ color }) => color !== this.state.currentColor \n\t\t)\n\t)\n\tValidatorForm.addValidationRule(\"isPaletteNameUnique\", value => \n\t\tthis.props.palettes.every(\n\t\t\t({ paletteName }) => paletteName.toLowerCase() !== value.toLowerCase()\n\t\t)\n\t)\n\n}\n\nhandleSubmit = () =>{\n\tlet newName = this.state.newPaletteName;\n\tconst newPalette ={\n\t\tpaletteName : newName,\n\t\tid : newName.toLowerCase().replace(/ /g,\"-\"),\n\t\tcolors : this.state.colors\n\t}\n\tthis.props.savePalette(newPalette);\n\tthis.props.history.push(\"/\");\n\n}\n\t\n\nhandleDrawerOpen = () => {\n\tthis.setState({ open: true });\n};\n\nhandleDrawerClose = () => {\n\tthis.setState({ open: false });\n};\n\nupdateCurrentColor = (newColor)=>{\n  \tthis.setState({currentColor : newColor.hex})\n}\n\naddNewColor = () =>{\n  \tconst newColor = {\n  \t\tcolor : this.state.currentColor,\n  \t\tname  : this.state.newColorName\n\t}\n  \tthis.setState({ \n  \t\tcolors:[...this.state.colors , newColor]  , \n  \t\tnewColorName :\"\"\n  \t});\n  \n }\n\n  handleChange =(e) =>{\n  \tthis.setState({\n  \t\t[e.target.name] : e.target.value\n  \t})\n  }\n\nremoveColor = (colorName) =>{\n\tthis.setState({\n\t\tcolors: this.state.colors.filter(color => color.name !== colorName )\n\t})\n}\n\nonSortEnd =({oldIndex , newIndex}) => {\n\tthis.setState (({colors}) => ({\n\t\tcolors :arrayMove(colors ,oldIndex, newIndex)\n\t}))\n};\n\nclearColors =() =>{\n\tthis.setState({colors :[]});\n}\n addRandomColor = () =>{\n\tconst allColors =this.props.palettes.map(p => p.colors).flat();\n\tconsole.log(allColors);\n}\n\n  \n\nrender() {\n\tconst { classes, maxColors, palettes } = this.props;\n\tconst { open, colors } = this.state;\n\n  return (\n   <div className={classes.root}>\n\t   <AppBar\n\t\t\tposition=\"fixed\"\n\t\t\tclassName={clsx(classes.appBar, {\n\t\t\t\t[classes.appBarShift]: open,\n\t\t\t})}\n\t\t>\n\t\t\t<Toolbar>\n\t\t\t \t<IconButton\n\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\taria-label=\"open drawer\"\n\t\t\t\t\tonClick={this.handleDrawerOpen}\n\t\t\t\t\tedge=\"start\"\n\t\t\t\t\tclassName={clsx(classes.menuButton, open && classes.hide)}\n\t\t\t    >\n\t\t\t    \t<MenuIcon />\n\t\t\t    </IconButton>\n\t\t\t    <Typography variant=\"h6\" noWrap>\n\t\t\t\t\tPersistent drawer\n\t\t\t    </Typography>\n\t\t\t    <ValidatorForm onSubmit={this.handleSubmit}>\n\t\t\t\t    <TextValidator\n\t\t\t\t    \tvalue = {this.state.newPaletteName}\n\t\t\t\t    \tlabel =\"Palette Name\"\n\t\t\t\t    \tname  ='newPaletteName'\n\t\t\t\t    \tonChange ={this.handleChange}\n\t\t\t\t    \tvalidators ={[\"required\" , \"isPaletteNameUnique\"]}\n\t\t\t\t    \terrorMessages={[\"Enter a palette name\",\"This name is used\"]}\n\t\t\t\t    />\n\n\n\t\t\t\t    <Button \n\t\t\t\t    \tvariant =\"contained\"\n\t\t\t\t    \tcolor   =\"secondary\"\n\t\t\t\t    \ttype   = \"submit\"\n\t\t\t\t    \tonClick ={this.handleSubmit}\n\t\t\t\t    >\n\t\t\t\t    \tSave Palette\n\n\t\t\t\t    </Button>\n\t\t\t    </ValidatorForm>\n\t\t\t</Toolbar>\n\t    </AppBar>\n\t\t<Drawer\n\t\t\tclassName={classes.drawer}\n\t\t    variant='persistent'\n\t\t    anchor='left'\n\t\t    open={open}\n\t   \t    classes={{\n\t\t\t\tpaper: classes.drawerPaper\n\t\t\t  }}\n\t\t>\n\t\t\t<div className={classes.drawerHeader}>\n\t\t\t\t<IconButton onClick={this.handleDrawerClose}>\n\t\t\t\t  <ChevronLeftIcon />\n\t\t\t\t</IconButton>\n\t\t\t</div>\n\t\t\t<Divider />\n\t\t\t<Typography variant =\"h4\" >\n\t\t\t\tDesign Your Palette\n\t\t\t</Typography>\n\t\t\t<div>\n\t\t\t\t<Button \n\t\t\t\t\tonClick ={this.clearColors} \n\t\t\t\t\tvariant = \"contained\" \n\t\t\t\t\tcolor =\"secondary\"\n\t\t\t\t>\n\t\t\t\t\tClear Palette\n\t\t\t\t</Button>\n\t\t\t\t<Button \n\t\t\t\t\tonClick ={this.addRandomColor}\n\t\t\t\t\tvariant = \"contained\" \n\t\t\t\t\tcolor =\"primary\"\n\t\t\t\t>\n\t\t\t\t\tRandom Color\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t\t<ChromePicker  \n\t\t\t\tcolor={this.state.currentColor}\n\t\t\t    onChangeComplete={this.updateCurrentColor}\n\t\t\t/>\n\t\t\t<ValidatorForm onSubmit = {this.addNewColor}>\n\t\t\t\t<TextValidator \n\t\t\t\t\tvalue = {this.state.newColorName}\n\t\t\t\t\tname  ='newColorName'\n\t\t\t\t\tonChange ={this.handleChange}\n\t\t\t\t\tvalidators ={[\n\t\t\t\t\t\t\"required\" ,\n\t\t\t\t\t\t\"isColorNameUnique\",\n\t\t\t\t\t\t\"isColorUnique\"\n\t\t\t\t\t]}\n\t\t\t\t\terrorMessages ={[\n\t\t\t\t\t\t\"This field is required\",\n\t\t\t\t\t\t\"Color name must be unique\",\n\t\t\t\t\t\t\"This color already exist\"\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t\t<Button \n\t\t\t\t\tvariant=\"contained\" \n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tstyle = {{backgroundColor :this.state.currentColor}}\n\t\t\t\t\ttype  = \"submit\"\n\t\t\t\t>\n\t\t\t\t\tAdd Color\n\t\t\t\t</Button>\n\t\t\t</ValidatorForm>\n\t\t\t\n\t\t</Drawer>\n\t\t<main\n\t\t \tclassName={classNames(classes.content, {\n\t\t\t\t[classes.contentShift]: open\n\t\t    })}\n\t\t>\n\t\t    <div className={classes.drawerHeader} />\n\t\t    \t<DraggableColorList \n\t\t    \t\tcolors ={this.state.colors}\n\t\t    \t\tremoveColor ={this.removeColor}\n\t\t    \t\taxis =\"xy\"\n\t\t    \t\tonSortEnd ={this.onSortEnd}\n\t\t   \t\t/>\n\t\t    \t\n\n\t\t</main>\n\t  </div>\n\t);\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(NewPaletteForm);"]},"metadata":{},"sourceType":"module"}